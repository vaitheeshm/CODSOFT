{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nexport default function ProductDetail() {\n  // const [product, setProduct] = useState(null);\n  // const [loading, setLoading] = useState(true);\n  // const [error, setError] = useState(null);\n  // const { id } = useParams();\n\n  // useEffect(() => {\n  //     const fetchProduct = async () => {\n  //         try {\n  //             const baseUrl = process.env.REACT_APP_BASE_URL || 'http://localhost:8000/api/v1'; // Default value for testing\n  //             const url = `${baseUrl}/products/${id}`;\n  //             console.log('Fetching product from:', url); // Log URL\n\n  //             const res = await fetch(url);\n  //             console.log('Response received:', res); // Log the response\n\n  //             if (!res.ok) {\n  //                 const errorText = await res.text(); // Read the response text\n  //                 console.error('Response error:', errorText); // Log the error text\n  //                 throw new Error(`Network response was not ok: ${res.statusText}`);\n  //             }\n\n  //             const data = await res.json();\n  //             console.log('Fetched data:', data); // Log fetched data\n\n  //             // Ensure the response contains the product data\n  //             if (data && data._id) {\n  //                 setProduct(data);\n  //                 console.log('Product state after setting:', data); // Log state after setting\n  //             } else {\n  //                 console.error('API response does not have expected product data:', data); // Log unexpected API response\n  //                 throw new Error('Product not found');\n  //             }\n  //         } catch (error) {\n  //             console.error('Fetch error:', error); // Log fetch error\n  //             setError(error.message);\n  //         } finally {\n  //             setLoading(false);\n  //             console.log('Loading state set to false'); // Log loading state\n  //         }\n  //     };\n\n  //     fetchProduct();\n  // }, [id]);\n\n  // if (loading) {\n  //     console.log('Loading...'); // Log loading state\n  //     return <div>Loading...</div>;\n  // }\n\n  // if (error) {\n  //     console.log('Error:', error); // Log error state\n  //     return <div>Error: {error}</div>;\n  // }\n\n  // if (!product) {\n  //     console.log('No product found'); // Log no product state\n  //     return <div>No product found</div>;\n  // }\n\n  // console.log('Product state:', product); // Log final product state\n\n  return;\n}\n_c = ProductDetail;\nvar _c;\n$RefreshReg$(_c, \"ProductDetail\");","map":{"version":3,"names":["useState","useEffect","useParams","ProductDetail","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/VSCode files/learnings/REACT JS/Tutorial/Ecommerce/frontend/src/pages/singleproductpage.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nexport default function ProductDetail() {\r\n    // const [product, setProduct] = useState(null);\r\n    // const [loading, setLoading] = useState(true);\r\n    // const [error, setError] = useState(null);\r\n    // const { id } = useParams();\r\n\r\n    // useEffect(() => {\r\n    //     const fetchProduct = async () => {\r\n    //         try {\r\n    //             const baseUrl = process.env.REACT_APP_BASE_URL || 'http://localhost:8000/api/v1'; // Default value for testing\r\n    //             const url = `${baseUrl}/products/${id}`;\r\n    //             console.log('Fetching product from:', url); // Log URL\r\n\r\n    //             const res = await fetch(url);\r\n    //             console.log('Response received:', res); // Log the response\r\n\r\n    //             if (!res.ok) {\r\n    //                 const errorText = await res.text(); // Read the response text\r\n    //                 console.error('Response error:', errorText); // Log the error text\r\n    //                 throw new Error(`Network response was not ok: ${res.statusText}`);\r\n    //             }\r\n\r\n    //             const data = await res.json();\r\n    //             console.log('Fetched data:', data); // Log fetched data\r\n\r\n    //             // Ensure the response contains the product data\r\n    //             if (data && data._id) {\r\n    //                 setProduct(data);\r\n    //                 console.log('Product state after setting:', data); // Log state after setting\r\n    //             } else {\r\n    //                 console.error('API response does not have expected product data:', data); // Log unexpected API response\r\n    //                 throw new Error('Product not found');\r\n    //             }\r\n    //         } catch (error) {\r\n    //             console.error('Fetch error:', error); // Log fetch error\r\n    //             setError(error.message);\r\n    //         } finally {\r\n    //             setLoading(false);\r\n    //             console.log('Loading state set to false'); // Log loading state\r\n    //         }\r\n    //     };\r\n\r\n    //     fetchProduct();\r\n    // }, [id]);\r\n\r\n    // if (loading) {\r\n    //     console.log('Loading...'); // Log loading state\r\n    //     return <div>Loading...</div>;\r\n    // }\r\n\r\n    // if (error) {\r\n    //     console.log('Error:', error); // Log error state\r\n    //     return <div>Error: {error}</div>;\r\n    // }\r\n\r\n    // if (!product) {\r\n    //     console.log('No product found'); // Log no product state\r\n    //     return <div>No product found</div>;\r\n    // }\r\n\r\n    // console.log('Product state:', product); // Log final product state\r\n\r\n    return \r\n}\r\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,SAAS,QAAQ,kBAAkB;AAE5C,eAAe,SAASC,aAAaA,CAAA,EAAG;EACpC;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;;EAEA;AACJ;AAACC,EAAA,GA/DuBD,aAAa;AAAA,IAAAC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}